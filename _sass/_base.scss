/**** t3hmun's educational base scss file.
 * 
 * The job of this file is to define the appearance and feel of basic HTML elements using CSS.
 * The comments are extra verbose for educational purposes.


__educational interlude__

## SASS extension to CSS

One may notice that most sizes and colours are set using variables.
These variables are a feature of SASS.
The values for these variables are all defined in the `main.scss` file.
SASS is an extension of CSS that outputs into CSS.
CSS tends to get ridiculously oversized and complicated these days.
SASS lets us abstract away a lot of this with variables and a bunch of other features.


## Margin VS Padding

Margins can overlap (only vertically in block elements) and are external to the element. 
Paddings do not overlap and are internal to the element. 
As a result margins only ensure a minimum distance between two elements. 
So if 2 elements have a 10px and 15px margin respectively, the gap between them would be 15px. 
If padding was used instead the gap would be 25 px.


## Inline Elements vs Block Elements

 * Inline elements appear within the normal flow of a sentence. 
 * They are positioned by text alignment.
 * Most inline elements are just tags that format text (like <b>).
 * Their size is generally defined by their content.

 * Block elements are not affected by alignment.
 * Unless their size is defined they fill all available free space.
 * Positioned using their margins.
 * They can be made floating...

CSS can be used to change a block to a inline and vice versa, but this tends to get messy.

__end of intuerlude__ 

****/

/* Everything visible is a child of body. This forms the basic default for everything. 
 * The header and footer are located inside the body (Header and footer are new HTML5 tags). 
 * The HTML head (not header) is mainly just meta tags and configuration. */
body {
    font-family: $base-font-family;
    font-size: $base-font-size;
    line-height: $base-line-height;
    font-weight: $body-font-weight;
    color: $text-colour;
    background-color: $background-colour;

    /* Everything lacking its own alignment will be centred (primarily header and footer). */
    text-align: center;
}

/* This is a new HTML 5 tag. Refers to a block of content that can be understood independently.
 * For our purposes it is the main content body of a page; the bit between the header and footer. */
article {
    /* Block elements are centred by setting their margins to auto. 
     * Only inline elements respond to text-alignment.*/
    margin-left: auto;
    margin-right: auto;

    /* The only inline text in this blog are headings and the date. 
     * The rest of the text are contained in <p> <blockquote> or <pre> tags, 
     *  which are all blocks with their own internal alignment. */
    text-align: left;

    /* Here we configure the maximum width we want to allow content to consume. */
    max-width: $article-width;
}

/* P for Paragraph. This should only be used for heavy blocks of reading text.
 * Other quantities of text should use other tags. */
p {
    /* Justify for glorious newspaper quality reading. */
    text-align: justify;
    /* Reading width is meant to be the maximum comfortable text block width. 
     * The ideal heavy reading width is meant to be rather narrow. 
     * However pictures and lighter text blocks can exploit more space, 
     *  hence the bigger size of $article-width. */
    max-width: $reading-width;
    /* Auto side margins to centre the p block in the screen. 
     * Extra margin at bottom for end of paragraph. */
    margin: $standard-margin auto $endpara-margin;
    /* This is required to stop the text from hugging the edge of the screen. A tiny gutter. */
    padding: 0 $standard-side-margin;
    
    /* This is important to prevent this block from wrapping / appearing-next-to floating elements. */
    clear: both;
}

blockquote {
    /* The side line to indicate a blockquote. */
    border-left: $thick-line solid $subtle-colour;
    /* This tiny bit of padding separates the tiers of blockquotes. */
    padding-left: $standard-side-margin;
    /* Centre the block. */
    margin: 0 auto;
    /* Give the blockquote slightly more space than standard text.  */
    max-width: $blockq-width;
    /* Avoid troublesome interaction with floating elements. */
    clear: both;
    /* A unique background to mark out the area. */
    background: $blockq-background;

    /* Set some features that may be set differently on some browsers. */
    outline:0;
    font-size:100%;
    vertical-align:baseline;
    quotes:none;

    /* All the text in a blockquote is also put in p tags. 
     * This overrides the width of p elements that are direct children of blockquote elements. 
     * Without this the text would revert to being restrained by the p max-width setting. */
    >p {
        max-width: $blockq-width;
    }
}

/* The list tag, general settings for lists. */
ul {
    /* No browser generated bullet points.
     * Each of the browsers generate bullet shapes differently so I prefer to create them using text (see li:before). */
    list-style: none;
    text-align: justify;
    padding:0;
    margin-top: $standard-margin;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: $endpara-margin;

    /* Bullet point lists are easier to read when given more horizontal space. */
    max-width: $bullet-width;

    /* Since the bullet list is deviating from the standard text width its nice to demark it with a custom background. */
    background: $bullet-background;
}

/* Individual list item. */
li {
    /* Using percentage makes it squash nicely on small displays. 
     * I can't explain the relationship between padding-left and text-indent. */
    padding-left: $bullet-indent; 
    padding-right: $standard-margin; 
    text-indent: -($bullet-indent - 1%); /* The 1% stops it touch the edge of the block. */
}

/* This inserts the content character to use as a bullet point. */
li:before {
    padding-right:$bullet-text-gap;
    content: "*";
    color: $strong-colour;
    font-weight: $bullet-weight;
}

/* Define the sub-list bullet point. */
li li:before {
    padding-right:$bullet-text-gap;
    content: "-";
    color: $strong-colour;
}

/* Img
 * Stops images being wider than the window.
 * Prevents the image stretching the area or flowing out of it. */
img {
    max-width: 100%;
}

/* Headings */
h1, h2, h3, h4, h5, h6 {
    font-weight: $header-weight;

    margin: $standard-margin $standard-side-margin $standard-margin;

    border-bottom: $thin-line solid $subtle-colour;

    /* This `&` syntax a feature of SASS. 
     * This results in `.post-title` CSS for each of the above header tags. */
    /* Make post heading stand out. */
    &.post-title {
        color: $highlight-colour;
    }

    /* Make site title stand out. */
    &.site-title {
        font-weight: $site-title-weight;
        color: $highlight-colour;
        border-bottom: none;
    }
}

/* Links. Colour them according to the theme. */
a {
    color: $link-colour;
    text-decoration: none; /* Removes the underline. */

    &:visited {
        color: $visited-colour;
    }

    &:hover {
        color: $text-colour;
        text-decoration: underline;
    }

    /* This is for site links in the page header. */
    &.top-nav {
        font-size: $big-font-size;
        font-weight: $header-weight;
        margin: $standard-margin;
    }
}

/* Code formatting - fenced code blocks use the pre tag.
 * The `code` tag is for inline monospace blocks.
 * The `pre` is for large blocks which may be colourised. 
 * I have not set a width for the code block.
 * This causes it to automatically fill the article block that it is contained in. 
 * Code needs to be given maximum horizontal space. Scrolling or wrapping code is no fun. */
pre,
code {
    border: $thin-line solid $subtle-colour;
    /* Creates neat curved corners for the border. */
    border-radius: $standard-radius;
    background-color: $code-background;

    /* Set a monospace font.*/
    font-family: $syntax-font-family;
}

/* This is the tag for small inline `code` bits. */
code {
    padding: 0 $standard-margin $standard-side-margin;
    text-align: left;
}

pre {
    /* Padding defined using 2 value shorthand.
     * First value is top and bottom.
     * Second value is right and left. */
    padding: $standard-margin $standard-side-margin;
    border-radius: 0;

    /* This gives the code block its own scroll bar.
     * We don't want the code to fall off or stretch the screen. */
    overflow-x: auto;

    /* The code in the pre elements should not have borders and whatnot.
     * The > makes it only apply to code elements that are direct children to
     * pre elements. */
    > code {
        border: 0;
        padding-right: 0;
        padding-left: 0;
    }
}


/* Style for index and recent posts. 
 */
.index {
    text-align: left;
    margin: $standard-margin $standard-side-margin;

    /* This is used to give the title and info a single underline. */
    .index-excerpt {
        border-top: $thin-line solid $very-subtle-colour;
        clear: both;
    }

    .index-title {
        font-size: $big-font-size;
        float: left;
    }

    .index-info {
        padding: $thin-line $standard-side-margin;
        float: right;
        overflow: auto;
    }
}